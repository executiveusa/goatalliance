// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CLIENT
  CONTRACTOR
  ADMIN
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  PAST_DUE
}

enum ContractorStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  role          UserRole  @default(CLIENT)
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Auth
  accounts      Account[]
  sessions      Session[]
  
  // Profile
  contractor    Contractor?
  orders        Order[]
  subscriptions Subscription[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Contractor {
  id          String            @id @default(cuid())
  userId      String            @unique
  businessName String?
  description String?
  website     String?
  phone       String?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  country     String           @default("US")
  status      ContractorStatus @default(PENDING)
  isPremium   Boolean          @default(false)
  rating      Float?
  reviewCount Int              @default(0)
  
  // Metadata
  skills      String[]
  experience  Int? // years of experience
  portfolio   Json?
  certifications String[]
  
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews     Review[]
  categories  ContractorCategory[]
  
  @@map("contractors")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  icon        String?
  parentId    String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  contractors ContractorCategory[]
  
  @@map("categories")
}

model ContractorCategory {
  contractorId String
  categoryId   String
  
  contractor   Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  category     Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@id([contractorId, categoryId])
  @@map("contractor_categories")
}

model Review {
  id           String   @id @default(cuid())
  contractorId String
  clientId     String
  rating       Int      // 1-5
  title        String?
  comment      String?
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  contractor   Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  client       User       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  @@map("reviews")
}

model Subscription {
  id                String             @id @default(cuid())
  userId            String
  stripeSubscriptionId String?         @unique
  stripePriceId     String
  stripeCustomerId  String?
  status            SubscriptionStatus
  currentPeriodStart DateTime?
  currentPeriodEnd  DateTime?
  
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("subscriptions")
}

model Order {
  id               String   @id @default(cuid())
  userId           String
  stripePaymentIntentId String? @unique
  amount           Int      // in cents
  currency         String   @default("usd")
  status           String   // succeeded, pending, failed
  description      String?
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("orders")
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  excerpt     String?
  content     String
  published   Boolean  @default(false)
  featured    Boolean  @default(false)
  authorId    String?
  
  // SEO
  metaTitle   String?
  metaDescription String?
  
  // Timestamps
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  author      User?    @relation(fields: [authorId], references: [id])
  
  @@map("blog_posts")
}